{
    "pipes": [],
    "interfaces": [
        {
            "name": "Task",
            "id": "interface-Task-791960f06f20b9e3de798bf2721a8c31423cae8ba03e769f3fab341a513f23629aac68fe3d759263ae2765d50cb5118a32c34222ea0695d08cd819f0255e81b9",
            "file": "src/app/models/task.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Task {\r\n    id: string;\r\n    title: string;\r\n    state: string;\r\n  }",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TaskStateModel",
            "id": "interface-TaskStateModel-fb3bec7b9de5328d02a09848fba0950ac31953858bd5344fbae294c4bbf7c151df59f244fbcf98ce6560db5abcda1297c78a2ed51d9aeb18304f9f91b1a25ad5",
            "file": "src/app/state/task.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { State, Selector, Action, StateContext } from '@ngxs/store';\r\nimport { patch, updateItem } from '@ngxs/store/operators';\r\nimport { Task } from '../models/task.model';\r\n\r\n// Defines the actions available to the app\r\nexport const actions = {\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n};\r\n\r\nexport class ArchiveTask {\r\n  static readonly type = actions.ARCHIVE_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class PinTask {\r\n  static readonly type = actions.PIN_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n\r\n// The initial state of our store when the app loads.\r\n// Usually you would fetch this from a server\r\nconst defaultTasks = [\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n];\r\n\r\nexport interface TaskStateModel {\r\n  tasks: Task[];\r\n  status: 'idle' | 'loading' | 'success' | 'error';\r\n  error: boolean;\r\n}\r\n\r\n// Sets the default state\r\n@State<TaskStateModel>({\r\n  name: 'taskbox',\r\n  defaults: {\r\n    tasks: defaultTasks,\r\n    status: 'idle',\r\n    error: false,\r\n  },\r\n})\r\n@Injectable()\r\nexport class TasksState {\r\n  // Defines a new selector for the error field\r\n  @Selector()\r\n  static getError(state: TaskStateModel): boolean {\r\n    return state.error;\r\n  }\r\n\r\n  @Selector()\r\n  static getAllTasks(state: TaskStateModel): Task[] {\r\n    return state.tasks;\r\n  }\r\n\r\n  // Triggers the PinTask action, similar to redux\r\n  @Action(PinTask)\r\n  pinTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: PinTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_PINNED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (pinnedTask) => pinnedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n  // Triggers the archiveTask action, similar to redux\r\n  @Action(ArchiveTask)\r\n  archiveTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: ArchiveTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_ARCHIVED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (archivedTask) => archivedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n}",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"idle\" | \"loading\" | \"success\" | \"error\"",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "tasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Task[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "TasksState",
            "id": "injectable-TasksState-fb3bec7b9de5328d02a09848fba0950ac31953858bd5344fbae294c4bbf7c151df59f244fbcf98ce6560db5abcda1297c78a2ed51d9aeb18304f9f91b1a25ad5",
            "file": "src/app/state/task.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "archiveTask",
                    "args": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "ArchiveTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ArchiveTask"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "ArchiveTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllTasks",
                    "args": [
                        {
                            "name": "state",
                            "type": "TaskStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Task[]",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "TaskStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "state",
                            "type": "TaskStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "TaskStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pinTask",
                    "args": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "PinTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "PinTask"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "PinTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { State, Selector, Action, StateContext } from '@ngxs/store';\r\nimport { patch, updateItem } from '@ngxs/store/operators';\r\nimport { Task } from '../models/task.model';\r\n\r\n// Defines the actions available to the app\r\nexport const actions = {\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n};\r\n\r\nexport class ArchiveTask {\r\n  static readonly type = actions.ARCHIVE_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class PinTask {\r\n  static readonly type = actions.PIN_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n\r\n// The initial state of our store when the app loads.\r\n// Usually you would fetch this from a server\r\nconst defaultTasks = [\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n];\r\n\r\nexport interface TaskStateModel {\r\n  tasks: Task[];\r\n  status: 'idle' | 'loading' | 'success' | 'error';\r\n  error: boolean;\r\n}\r\n\r\n// Sets the default state\r\n@State<TaskStateModel>({\r\n  name: 'taskbox',\r\n  defaults: {\r\n    tasks: defaultTasks,\r\n    status: 'idle',\r\n    error: false,\r\n  },\r\n})\r\n@Injectable()\r\nexport class TasksState {\r\n  // Defines a new selector for the error field\r\n  @Selector()\r\n  static getError(state: TaskStateModel): boolean {\r\n    return state.error;\r\n  }\r\n\r\n  @Selector()\r\n  static getAllTasks(state: TaskStateModel): Task[] {\r\n    return state.tasks;\r\n  }\r\n\r\n  // Triggers the PinTask action, similar to redux\r\n  @Action(PinTask)\r\n  pinTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: PinTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_PINNED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (pinnedTask) => pinnedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n  // Triggers the archiveTask action, similar to redux\r\n  @Action(ArchiveTask)\r\n  archiveTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: ArchiveTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_ARCHIVED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (archivedTask) => archivedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n}",
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "ArchiveTask",
            "id": "class-ArchiveTask-fb3bec7b9de5328d02a09848fba0950ac31953858bd5344fbae294c4bbf7c151df59f244fbcf98ce6560db5abcda1297c78a2ed51d9aeb18304f9f91b1a25ad5",
            "file": "src/app/state/task.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { State, Selector, Action, StateContext } from '@ngxs/store';\r\nimport { patch, updateItem } from '@ngxs/store/operators';\r\nimport { Task } from '../models/task.model';\r\n\r\n// Defines the actions available to the app\r\nexport const actions = {\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n};\r\n\r\nexport class ArchiveTask {\r\n  static readonly type = actions.ARCHIVE_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class PinTask {\r\n  static readonly type = actions.PIN_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n\r\n// The initial state of our store when the app loads.\r\n// Usually you would fetch this from a server\r\nconst defaultTasks = [\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n];\r\n\r\nexport interface TaskStateModel {\r\n  tasks: Task[];\r\n  status: 'idle' | 'loading' | 'success' | 'error';\r\n  error: boolean;\r\n}\r\n\r\n// Sets the default state\r\n@State<TaskStateModel>({\r\n  name: 'taskbox',\r\n  defaults: {\r\n    tasks: defaultTasks,\r\n    status: 'idle',\r\n    error: false,\r\n  },\r\n})\r\n@Injectable()\r\nexport class TasksState {\r\n  // Defines a new selector for the error field\r\n  @Selector()\r\n  static getError(state: TaskStateModel): boolean {\r\n    return state.error;\r\n  }\r\n\r\n  @Selector()\r\n  static getAllTasks(state: TaskStateModel): Task[] {\r\n    return state.tasks;\r\n  }\r\n\r\n  // Triggers the PinTask action, similar to redux\r\n  @Action(PinTask)\r\n  pinTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: PinTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_PINNED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (pinnedTask) => pinnedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n  // Triggers the archiveTask action, similar to redux\r\n  @Action(ArchiveTask)\r\n  archiveTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: ArchiveTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_ARCHIVED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (archivedTask) => archivedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "actions.ARCHIVE_TASK",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PinTask",
            "id": "class-PinTask-fb3bec7b9de5328d02a09848fba0950ac31953858bd5344fbae294c4bbf7c151df59f244fbcf98ce6560db5abcda1297c78a2ed51d9aeb18304f9f91b1a25ad5",
            "file": "src/app/state/task.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { State, Selector, Action, StateContext } from '@ngxs/store';\r\nimport { patch, updateItem } from '@ngxs/store/operators';\r\nimport { Task } from '../models/task.model';\r\n\r\n// Defines the actions available to the app\r\nexport const actions = {\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n};\r\n\r\nexport class ArchiveTask {\r\n  static readonly type = actions.ARCHIVE_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class PinTask {\r\n  static readonly type = actions.PIN_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n\r\n// The initial state of our store when the app loads.\r\n// Usually you would fetch this from a server\r\nconst defaultTasks = [\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n];\r\n\r\nexport interface TaskStateModel {\r\n  tasks: Task[];\r\n  status: 'idle' | 'loading' | 'success' | 'error';\r\n  error: boolean;\r\n}\r\n\r\n// Sets the default state\r\n@State<TaskStateModel>({\r\n  name: 'taskbox',\r\n  defaults: {\r\n    tasks: defaultTasks,\r\n    status: 'idle',\r\n    error: false,\r\n  },\r\n})\r\n@Injectable()\r\nexport class TasksState {\r\n  // Defines a new selector for the error field\r\n  @Selector()\r\n  static getError(state: TaskStateModel): boolean {\r\n    return state.error;\r\n  }\r\n\r\n  @Selector()\r\n  static getAllTasks(state: TaskStateModel): Task[] {\r\n    return state.tasks;\r\n  }\r\n\r\n  // Triggers the PinTask action, similar to redux\r\n  @Action(PinTask)\r\n  pinTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: PinTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_PINNED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (pinnedTask) => pinnedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n  // Triggers the archiveTask action, similar to redux\r\n  @Action(ArchiveTask)\r\n  archiveTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: ArchiveTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_ARCHIVED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (archivedTask) => archivedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "actions.PIN_TASK",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-4165397e5c63c47c344d201ddb13bc3df8e815a8b3b8e85eaf2982f1d55e30a801309b3805afd74bd00eb71ea672a922607f9362f19e0f3af4b1223cecbd7fc2",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'Markdown_Storybook'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'Markdown_Storybook';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<app-pure-task-list></app-pure-task-list>"
        },
        {
            "name": "MarkdownComponent",
            "id": "component-MarkdownComponent-08304ad3fe54756849b67f4e493a55562c22ee32e1d510a54fbbaed8ecb4d0c4b5098463052dd6a2db215ea34dd015221b146c9b24f60a1e8354b7e0916b60d9",
            "file": "src/app/markdown/markdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-markdown",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./markdown.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "markdown",
                    "defaultValue": "`## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "defaultValue": "'Markdownstorybook'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-markdown',\r\n  templateUrl: './markdown.component.html',\r\n\r\n})\r\nexport class MarkdownComponent {\r\n  title = 'Markdownstorybook';\r\n\r\n  markdown = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n  }\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "\r\n<markdown class=\"variable-binding\" [data]=\"markdown\"></markdown>"
        },
        {
            "name": "MarkdownTaskListComponent",
            "id": "component-MarkdownTaskListComponent-b01701bff2aa7e67e1f2d8040c8be05f9c6d305fae364257c5106bd0b59df37f29c64eb7f814b24b08b9efa7dc538732401c4d1421d1635fa48a61612f6b5c55",
            "file": "src/app/markdown/TaskListmarkdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-markdown-taskList",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./markdown.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "markdown",
                    "defaultValue": "`## TAsk list mdx!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "defaultValue": "'Markdownstorybook'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-markdown-taskList',\r\n  templateUrl: './markdown.component.html',\r\n\r\n})\r\nexport class MarkdownTaskListComponent {\r\n  title = 'Markdownstorybook';\r\n\r\n  markdown = `## TAsk list mdx!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n  }\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "\r\n<markdown class=\"variable-binding\" [data]=\"markdown\"></markdown>"
        },
        {
            "name": "MermaidComponent",
            "id": "component-MermaidComponent-1c70f5c4db81b8650fdab575339960631a2ccce8d0a72c380d3224a719513857cd5836b0240bdcd47c1ec1ff3a633008a65d1d071665f1ed4e75fa419d7d5bdb",
            "file": "src/app/mermaid/mermaid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-mermaid",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./mermaid.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-mermaid',\r\n  templateUrl: './mermaid.component.html',\r\n\r\n})\r\nexport class MermaidComponent {\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<markdown mermaid  ngPreserveWhitespaces>\r\n  <pre class=\"mermaid\">\r\n    flowchart TD\r\n    id1([Markdown in html])\r\n    id2([Markdown in template])\r\n    id3([Markdown in data])\r\n    id4([Markdown loaded from src])\r\n  </pre>\r\n  </markdown>"
        },
        {
            "name": "PureTaskListComponent",
            "id": "component-PureTaskListComponent-df9a5c5b7bdf8859ff2287d2d37f8d378bb46d9d0854e4a5f91653d70edbb3feb670fa9f8a95310fc346fa59ce5b59fe82b3470db9fd9e40fbf5ae659d99976c",
            "file": "src/app/components/task-list/pure-task-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pure-task-list",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"list-items\">\n  <app-simpletask\n    *ngFor=\"let task of tasksInOrder\"\n    [task]=\"task\"\n    (onArchiveTask)=\"onArchiveTask.emit($event)\"\n    (onPinTask)=\"onPinTask.emit($event)\"\n  >\n  </app-simpletask>\n  <div\n    *ngIf=\"tasksInOrder.length === 0 && !loading\"\n    class=\"wrapper-message\"\n  >\n    <span class=\"icon-check\"></span>\n    <p class=\"title-message\">You have no tasks</p>\n    <p class=\"subtitle-message\">Sit back and relax</p>\n  </div>\n  <div *ngIf=\"loading\">\n    <div *ngFor=\"let i of [1, 2, 3, 4, 5, 6]\" class=\"loading-item\">\n      <span class=\"glow-checkbox\"></span>\n      <span class=\"glow-text\">\n        <span>Loading</span> <span>cool</span> <span>state</span>\n      </span>\n    </div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "Task[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveTask",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onPinTask",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Task } from '../../models/task.model';\r\n@Component({\r\n selector: 'app-pure-task-list',\r\n  template: `\r\n    <div class=\"list-items\">\r\n      <app-simpletask\r\n        *ngFor=\"let task of tasksInOrder\"\r\n        [task]=\"task\"\r\n        (onArchiveTask)=\"onArchiveTask.emit($event)\"\r\n        (onPinTask)=\"onPinTask.emit($event)\"\r\n      >\r\n      </app-simpletask>\r\n      <div\r\n        *ngIf=\"tasksInOrder.length === 0 && !loading\"\r\n        class=\"wrapper-message\"\r\n      >\r\n        <span class=\"icon-check\"></span>\r\n        <p class=\"title-message\">You have no tasks</p>\r\n        <p class=\"subtitle-message\">Sit back and relax</p>\r\n      </div>\r\n      <div *ngIf=\"loading\">\r\n        <div *ngFor=\"let i of [1, 2, 3, 4, 5, 6]\" class=\"loading-item\">\r\n          <span class=\"glow-checkbox\"></span>\r\n          <span class=\"glow-text\">\r\n            <span>Loading</span> <span>cool</span> <span>state</span>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n})\r\n export class PureTaskListComponent {\r\n    /**\r\n     * @ignore\r\n     * Component property to define ordering of tasks\r\n    */\r\n    tasksInOrder: Task[] = [];\r\n\r\n    @Input() loading = false;\r\n\r\n    // tslint:disable-next-line: no-output-on-prefix\r\n    @Output() onPinTask: EventEmitter<any> = new EventEmitter();\r\n\r\n    // tslint:disable-next-line: no-output-on-prefix\r\n    @Output() onArchiveTask: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Input()\r\n    set tasks(arr: Task[]) {\r\n      const initialTasks = [\r\n        ...arr.filter((t) => t.state === 'TASK_PINNED'),\r\n        ...arr.filter((t) => t.state !== 'TASK_PINNED'),\r\n      ];\r\n      const filteredTasks = initialTasks.filter(\r\n        (t) => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED'\r\n      );\r\n      this.tasksInOrder = filteredTasks.filter(\r\n        (t) => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED'\r\n      );\r\n    }\r\n }",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "tasks": {
                    "name": "tasks",
                    "setSignature": {
                        "name": "tasks",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "arr",
                                "type": "Task[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 50,
                        "jsdoctags": [
                            {
                                "name": "arr",
                                "type": "Task[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "TaskListComponent",
            "id": "component-TaskListComponent-9ac4bfb4c0f432f784ed226a09c34e7bfc8bb8886d83a146942c1f74fb995d52ad5d47bcde2b52dd0b33cccd9b69ebd8afd2f7cc72441e0d958b7eb427a67fbc",
            "file": "src/app/components/task-list/task-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-list",
            "styleUrls": [],
            "styles": [],
            "template": "<app-pure-task-list\n  [tasks]=\"tasks$ | async\"\n  (onArchiveTask)=\"archiveTask($event)\"\n  (onPinTask)=\"pinTask($event)\"\n></app-pure-task-list>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tasks$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "archiveTask",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the archiveTask event\n",
                    "description": "<p>Component method to trigger the archiveTask event</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pinTask",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the pinTask event\n",
                    "description": "<p>Component method to trigger the pinTask event</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { Store } from '@ngxs/store';\r\nimport { ArchiveTask, PinTask } from '../../state/task.state';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-task-list',\r\n  template: `\r\n    <app-pure-task-list\r\n      [tasks]=\"tasks$ | async\"\r\n      (onArchiveTask)=\"archiveTask($event)\"\r\n      (onPinTask)=\"pinTask($event)\"\r\n    ></app-pure-task-list>\r\n  `,\r\n})\r\nexport class TaskListComponent {\r\n  tasks$?: Observable<any>;\r\n\r\n  constructor(private store: Store) {\r\n     this.tasks$ = store.select((state) => state.taskbox.tasks);\r\n  }\r\n\r\n  /**\r\n   * Component method to trigger the archiveTask event\r\n   */\r\n  archiveTask(id: string) {\r\n    this.store.dispatch(new ArchiveTask(id));\r\n  }\r\n\r\n  /**\r\n   * Component method to trigger the pinTask event\r\n   */\r\n  pinTask(id: string) {\r\n    this.store.dispatch(new PinTask(id));\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TaskStylesComponent",
            "id": "component-TaskStylesComponent-3d8fbaae740d9aec897155a2f5f32c28fbf314730af2592f168853c9ceb91c7fa8fb0546469c4b2bf1061d63ab073c87f9c0e7382f3d77ff400101056d1b678f",
            "file": "src/app/components/task-styles/task-styles.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-simpletask",
            "styleUrls": [
                "./task-styles.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./task-styles.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPinTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onArchive",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPin",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Task } from \"../../models/task.model\";\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-simpletask',\r\n  templateUrl: './task-styles.component.html',\r\n  styleUrls: ['./task-styles.component.css']\r\n})\r\nexport class TaskStylesComponent {\r\n  @Input()\r\n  task ?: any\r\n\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onPinTask = new EventEmitter<Event>();\r\n  onPin(id:any) {\r\n    this.onPinTask.emit(id);\r\n    }\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onArchiveTask = new EventEmitter<Event>();\r\n    \r\n  \r\n  onArchive(id:any) {\r\n    this.onArchiveTask.emit(id);\r\n    }\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./task-styles.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "\r\n\r\n\r\n\r\n<div class=\"list-item {{ task?.state }}\">\r\n    <label\r\n      [attr.aria-label]=\"'archiveTask-' + task?.id\"\r\n      for=\"checked-{{ task?.id }}\"\r\n      class=\"checkbox\"\r\n    >\r\n      <input\r\n        type=\"checkbox\"\r\n        disabled=\"true\"\r\n        [defaultChecked]=\"task?.state === 'TASK_ARCHIVED'\"\r\n        name=\"checked-{{ task?.id }}\"\r\n        id=\"checked-{{ task?.id }}\"\r\n      />\r\n      <span class=\"checkbox-custom\" (click)=\"onArchive(task?.id)\"></span>\r\n    </label>\r\n    <label\r\n      [attr.aria-label]=\"task?.title + ''\"\r\n      for=\"title-{{ task?.id }}\"\r\n      class=\"title\"\r\n    >\r\n      <input\r\n        type=\"text\"\r\n        [value]=\"task?.title\"\r\n        readonly=\"true\"\r\n        id=\"title-{{ task?.id }}\"\r\n        name=\"title-{{ task?.id }}\"\r\n        placeholder=\"Input title\"\r\n      />\r\n    </label>\r\n    <button\r\n      *ngIf=\"task?.state !== 'TASK_ARCHIVED'\"\r\n      class=\"pin-button\"\r\n      [attr.aria-label]=\"'pinTask-' + task?.id\"\r\n      (click)=\"onPin(task.id)\"\r\n    >\r\n      <span class=\"icon-star\"></span>\r\n    </button>\r\n  </div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-4865a41127aec837c872faee2efda879d069606511ba9c4d8214014512cf0a15365fa0dc91bee9c72e95ee09a82c928425573c48963484b93b3b3af0f4a2b0b6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { MarkdownComponent } from './markdown/markdown.component';\r\nimport { MarkdownModule } from 'ngx-markdown';\r\nimport { MermaidComponent } from './mermaid/mermaid.component';\r\n\r\n\r\n import { TaskModule } from './components/task.module';\r\n import { NgxsModule } from '@ngxs/store';\r\n import { NgxsReduxDevtoolsPluginModule } from '@ngxs/devtools-plugin';\r\n import { NgxsLoggerPluginModule } from '@ngxs/logger-plugin';\r\n\r\n import { environment } from '../environments/environment';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    MarkdownComponent,\r\n    MermaidComponent,\r\n    \r\n    \r\n  ],\r\n  imports: [\r\n    TaskModule,\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    MarkdownModule.forRoot(),\r\n        NgxsModule.forRoot([], {\r\n           developmentMode: !environment.production,\r\n         }),\r\n         NgxsReduxDevtoolsPluginModule.forRoot(),\r\n         NgxsLoggerPluginModule.forRoot({\r\n           disabled: environment.production,\r\n         }),\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "MarkdownComponent"
                        },
                        {
                            "name": "MermaidComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "TaskModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-4518c33195180c88b148f5ad346bbd509e37db201ff0191c9bd5d00989bc674a7e8476b2298b5f61b74b4fa3379b6d71a3615e2cc472074cf6e416b23941131b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TaskModule",
            "id": "module-TaskModule-b60c962cf8b947df6f89b0a08c55250056e4156d700b67eed3abcbaeac11ce500e58dbe72ac3cd979331c7a7e06b68e7674898378d3ddffdce5225c7baaeb1ed",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/task.module.ts",
            "methods": [],
            "sourceCode": "\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgxsModule } from '@ngxs/store';\r\n\r\nimport { TaskStylesComponent } from './task-styles/task-styles.component';\r\nimport { TaskListComponent } from './task-list/task-list.component';\r\nimport { TasksState } from '../state/task.state';\r\nimport { PureTaskListComponent } from './task-list/pure-task-list.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, NgxsModule.forFeature([TasksState])],\r\n  exports: [TaskStylesComponent, TaskListComponent,PureTaskListComponent],\r\n  declarations: [TaskStylesComponent, TaskListComponent, PureTaskListComponent],\r\n  providers: [],\r\n})\r\nexport class TaskModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PureTaskListComponent"
                        },
                        {
                            "name": "TaskListComponent"
                        },
                        {
                            "name": "TaskStylesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PureTaskListComponent"
                        },
                        {
                            "name": "TaskListComponent"
                        },
                        {
                            "name": "TaskStylesComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "actions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/task.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/markdown/markdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  onPinTask: action('onPinTask'),\r\n  onArchiveTask: action('onArchiveTask'),\r\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/markdown/TaskListmarkdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  onPinTask: action('onPinTask'),\r\n  onArchiveTask: action('onArchiveTask'),\r\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mermaid/mermaid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  onPinTask: action('onPinTask'),\r\n  onArchiveTask: action('onArchiveTask'),\r\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task-styles/task-styles.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  onPinTask: action('onPinTask'),\r\n  onArchiveTask: action('onArchiveTask'),\r\n}"
            },
            {
                "name": "Archived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task-styles/task-styles.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    props: {\r\n      task: {\r\n        id: '1',\r\n        title: 'Test Task',\r\n        state: 'TASK_ARCHIVED',\r\n      },\r\n      onPinTask: actionsData.onPinTask,\r\n      onArchiveTask: actionsData.onArchiveTask,\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task-list/pure-task-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  \r\n  args:{\r\n  tasks: [\r\n    { ...TaskStylesStories.DefaultTask.args?.['task'], id: '1', title: 'Task 1' },\r\n    { ...TaskStylesStories.DefaultTask.args?.['task'], id: '2', title: 'Task 2' },\r\n    { ...TaskStylesStories.DefaultTask.args?.['task'], id: '3', title: 'Task 3' },\r\n    { ...TaskStylesStories.DefaultTask.args?.['task'], id: '4', title: 'Task 4' },\r\n    { ...TaskStylesStories.DefaultTask.args?.['task'], id: '5', title: 'Task 5' },\r\n    { ...TaskStylesStories.DefaultTask.args?.['task'], id: '6', title: 'Task 6' },\r\n  ],\r\n}\r\n}"
            },
            {
                "name": "DefaultTask",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task-styles/task-styles.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n\r\n  args:{\r\n    task:{\r\n      id: '1',\r\n      title: 'Test Task',\r\n      state: 'TASK_INBOX', \r\n    }\r\n  }\r\n  // render: () => ({\r\n  //   props: {\r\n  //     task: {\r\n  //       id: '1',\r\n  //       title: 'Test Task',\r\n  //       state: 'TASK_INBOX',\r\n  //     },\r\n  //     onPinTask: actionsData.onPinTask,\r\n  //     onArchiveTask: actionsData.onArchiveTask,\r\n  //   },\r\n  // }),\r\n}"
            },
            {
                "name": "defaultTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/task.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n]"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task-list/pure-task-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args : {\r\n     // Shaping the stories through args composition.\r\n     // Inherited data coming from the Loading story.\r\n     // ...Loading.args,\r\n    ...Loading.args,\r\n     loading: false,\r\n  }\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    production: true\r\n  }"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    production: false\r\n  }"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task-list/pure-task-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args : {\r\n      tasks: [],\r\n      loading: true,\r\n  }\r\n\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task-list/pure-task-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PureTaskListComponent>",
                "defaultValue": "{\r\n\r\n  title: 'TaskBox/PureTaskList',\r\n  component: PureTaskListComponent,\r\n\r\n  decorators: [\r\n    moduleMetadata({\r\n      //👇 Imports both components to allow component composition with storybook\r\n      declarations: [PureTaskListComponent, TaskStylesComponent],\r\n      imports: [CommonModule],\r\n    }),\r\n    //👇 Wraps our stories with a decorator\r\n    componentWrapperDecorator(story => `<div style=\"margin: 3em\">${story}</div>`),\r\n  ],\r\n\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task-styles/task-styles.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TaskStylesComponent>",
                "defaultValue": "{\r\n  /* 👇 The title prop is optional.\r\n   * See https://storybook.js.org/docs/angular/configure/overview#configure-story-loading\r\n   * to learn how to generate automatic titles\r\n   */\r\n  title: 'TaskBox/TaskStylesComponent',\r\n  component: TaskStylesComponent,\r\n\r\n}"
            },
            {
                "name": "metaDetail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/markdown/markdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<MarkdownComponent>",
                "defaultValue": "{\r\n  /* 👇 The title prop is optional.\r\n   * See https://storybook.js.org/docs/angular/configure/overview#configure-story-loading\r\n   * to learn how to generate automatic titles\r\n   */\r\n  title: 'Markdown',\r\n  component: MarkdownComponent,\r\n  decorators:[\r\n    moduleMetadata({\r\n        //👇 Imports both components to allow component composition with storybook\r\n        declarations: [MarkdownComponent],\r\n        imports: [            \r\n            CommonModule,\r\n            HttpClientModule,\r\n            MarkdownModule.forRoot({ loader: HttpClient }),\r\n        ]\r\n      }),\r\n  componentWrapperDecorator(story => `<div style=\"margin: 3em\">${story}</div>`)\r\n  ]\r\n}"
            },
            {
                "name": "metaDetail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/markdown/TaskListmarkdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<MarkdownTaskListComponent>",
                "defaultValue": "{\r\n  /* 👇 The title prop is optional.\r\n   * See https://storybook.js.org/docs/angular/configure/overview#configure-story-loading\r\n   * to learn how to generate automatic titles\r\n   */\r\n  title: 'Markdown',\r\n  component: MarkdownTaskListComponent,\r\n  decorators:[\r\n    moduleMetadata({\r\n        //👇 Imports both components to allow component composition with storybook\r\n        declarations: [MarkdownTaskListComponent],\r\n        imports: [            \r\n            CommonModule,\r\n            HttpClientModule,\r\n            MarkdownModule.forRoot({ loader: HttpClient }),\r\n        ]\r\n      }),\r\n  componentWrapperDecorator(story => `<div style=\"margin: 3em\">${story}</div>`)\r\n  ]\r\n}"
            },
            {
                "name": "metaDetail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mermaid/mermaid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<MermaidComponent>",
                "defaultValue": "{\r\n  /* 👇 The title prop is optional.\r\n   * See https://storybook.js.org/docs/angular/configure/overview#configure-story-loading\r\n   * to learn how to generate automatic titles\r\n   */\r\n  title: 'Mermaid',\r\n  component: MermaidComponent,\r\n  decorators:[\r\n    moduleMetadata({\r\n        //👇 Imports both components to allow component composition with storybook\r\n        declarations: [MermaidComponent],\r\n        imports: [            \r\n            CommonModule,\r\n            HttpClientModule,\r\n            MarkdownModule.forRoot({ loader: HttpClient }),\r\n        ]\r\n      }),\r\n  componentWrapperDecorator(story => `<div style=\"margin: 3em\">${story}</div>`)\r\n  ]\r\n}"
            },
            {
                "name": "Pinned",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task-styles/task-styles.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: () => ({\r\n    props: {\r\n      task: {\r\n        id: '1',\r\n        title: 'Test Task',\r\n        state: 'TASK_PINNED',\r\n      },\r\n      onPinTask: actionsData.onPinTask,\r\n      onArchiveTask: actionsData.onArchiveTask,\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\r\n  parameters: {\r\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\r\n    controls: {\r\n      matchers: {\r\n        color: /(background|color)$/i,\r\n        date: /Date$/,\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "PrivateMarkdown",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/markdown/markdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n  render: () => ({\r\n    props: {\r\n      task: {\r\n        id: '1',\r\n        title: 'Test Task',\r\n        state: 'TASK_INBOX',\r\n      },\r\n      onPinTask: actionsData.onPinTask,\r\n      onArchiveTask: actionsData.onArchiveTask,\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "PrivateMarkdownTlist",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/markdown/TaskListmarkdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n  render: () => ({\r\n    props: {\r\n      task: {\r\n        id: '1',\r\n        title: 'Test Task',\r\n        state: 'TASK_INBOX',\r\n      },\r\n      onPinTask: actionsData.onPinTask,\r\n      onArchiveTask: actionsData.onArchiveTask,\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "PrivateMermaid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mermaid/mermaid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n  render: () => ({\r\n    props: {\r\n      task: {\r\n        id: '1',\r\n        title: 'Test Task',\r\n        state: 'TASK_INBOX',\r\n      },\r\n      onPinTask: actionsData.onPinTask,\r\n      onArchiveTask: actionsData.onArchiveTask,\r\n    },\r\n  }),\r\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task-list/pure-task-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n      onPinTask: TaskStylesStories.DefaultTask.args?.onPinTask,\r\n      onArchiveTask: TaskStylesStories.DefaultTask.args?.onArchiveTask,\r\n    }\r\n}"
            },
            {
                "name": "WithPinnedTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task-list/pure-task-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n\r\n  args:{\r\n      tasks: [\r\n          ...(Default.args?.['tasks'] as Task[] ).slice(0, 5),\r\n          { id: '6', title: 'Task 6 (pinned)', state: 'TASK_PINNED' },\r\n      ],\r\n  \r\n  }\r\n  }"
            }
        ],
        "functions": [
            {
                "name": "action",
                "file": "src/app/components/task-list/pure-task-list.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "arg0",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "arg0",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PureTaskListComponent>",
                "file": "src/app/components/task-list/pure-task-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TaskStylesComponent>",
                "file": "src/app/components/task-styles/task-styles.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "StoryDetail",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<MarkdownComponent>",
                "file": "src/app/markdown/markdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "StoryDetail",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<MarkdownTaskListComponent>",
                "file": "src/app/markdown/TaskListmarkdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "StoryDetail",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<MermaidComponent>",
                "file": "src/app/mermaid/mermaid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/state/task.state.ts": [
                {
                    "name": "actions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/task.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n}"
                },
                {
                    "name": "defaultTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/task.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n]"
                }
            ],
            "src/app/markdown/markdown.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/markdown/markdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  onPinTask: action('onPinTask'),\r\n  onArchiveTask: action('onArchiveTask'),\r\n}"
                },
                {
                    "name": "metaDetail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/markdown/markdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<MarkdownComponent>",
                    "defaultValue": "{\r\n  /* 👇 The title prop is optional.\r\n   * See https://storybook.js.org/docs/angular/configure/overview#configure-story-loading\r\n   * to learn how to generate automatic titles\r\n   */\r\n  title: 'Markdown',\r\n  component: MarkdownComponent,\r\n  decorators:[\r\n    moduleMetadata({\r\n        //👇 Imports both components to allow component composition with storybook\r\n        declarations: [MarkdownComponent],\r\n        imports: [            \r\n            CommonModule,\r\n            HttpClientModule,\r\n            MarkdownModule.forRoot({ loader: HttpClient }),\r\n        ]\r\n      }),\r\n  componentWrapperDecorator(story => `<div style=\"margin: 3em\">${story}</div>`)\r\n  ]\r\n}"
                },
                {
                    "name": "PrivateMarkdown",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/markdown/markdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n  render: () => ({\r\n    props: {\r\n      task: {\r\n        id: '1',\r\n        title: 'Test Task',\r\n        state: 'TASK_INBOX',\r\n      },\r\n      onPinTask: actionsData.onPinTask,\r\n      onArchiveTask: actionsData.onArchiveTask,\r\n    },\r\n  }),\r\n}"
                }
            ],
            "src/app/markdown/TaskListmarkdown.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/markdown/TaskListmarkdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  onPinTask: action('onPinTask'),\r\n  onArchiveTask: action('onArchiveTask'),\r\n}"
                },
                {
                    "name": "metaDetail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/markdown/TaskListmarkdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<MarkdownTaskListComponent>",
                    "defaultValue": "{\r\n  /* 👇 The title prop is optional.\r\n   * See https://storybook.js.org/docs/angular/configure/overview#configure-story-loading\r\n   * to learn how to generate automatic titles\r\n   */\r\n  title: 'Markdown',\r\n  component: MarkdownTaskListComponent,\r\n  decorators:[\r\n    moduleMetadata({\r\n        //👇 Imports both components to allow component composition with storybook\r\n        declarations: [MarkdownTaskListComponent],\r\n        imports: [            \r\n            CommonModule,\r\n            HttpClientModule,\r\n            MarkdownModule.forRoot({ loader: HttpClient }),\r\n        ]\r\n      }),\r\n  componentWrapperDecorator(story => `<div style=\"margin: 3em\">${story}</div>`)\r\n  ]\r\n}"
                },
                {
                    "name": "PrivateMarkdownTlist",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/markdown/TaskListmarkdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n  render: () => ({\r\n    props: {\r\n      task: {\r\n        id: '1',\r\n        title: 'Test Task',\r\n        state: 'TASK_INBOX',\r\n      },\r\n      onPinTask: actionsData.onPinTask,\r\n      onArchiveTask: actionsData.onArchiveTask,\r\n    },\r\n  }),\r\n}"
                }
            ],
            "src/app/mermaid/mermaid.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mermaid/mermaid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  onPinTask: action('onPinTask'),\r\n  onArchiveTask: action('onArchiveTask'),\r\n}"
                },
                {
                    "name": "metaDetail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mermaid/mermaid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<MermaidComponent>",
                    "defaultValue": "{\r\n  /* 👇 The title prop is optional.\r\n   * See https://storybook.js.org/docs/angular/configure/overview#configure-story-loading\r\n   * to learn how to generate automatic titles\r\n   */\r\n  title: 'Mermaid',\r\n  component: MermaidComponent,\r\n  decorators:[\r\n    moduleMetadata({\r\n        //👇 Imports both components to allow component composition with storybook\r\n        declarations: [MermaidComponent],\r\n        imports: [            \r\n            CommonModule,\r\n            HttpClientModule,\r\n            MarkdownModule.forRoot({ loader: HttpClient }),\r\n        ]\r\n      }),\r\n  componentWrapperDecorator(story => `<div style=\"margin: 3em\">${story}</div>`)\r\n  ]\r\n}"
                },
                {
                    "name": "PrivateMermaid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mermaid/mermaid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n  render: () => ({\r\n    props: {\r\n      task: {\r\n        id: '1',\r\n        title: 'Test Task',\r\n        state: 'TASK_INBOX',\r\n      },\r\n      onPinTask: actionsData.onPinTask,\r\n      onArchiveTask: actionsData.onArchiveTask,\r\n    },\r\n  }),\r\n}"
                }
            ],
            "src/app/components/task-styles/task-styles.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task-styles/task-styles.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  onPinTask: action('onPinTask'),\r\n  onArchiveTask: action('onArchiveTask'),\r\n}"
                },
                {
                    "name": "Archived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task-styles/task-styles.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    props: {\r\n      task: {\r\n        id: '1',\r\n        title: 'Test Task',\r\n        state: 'TASK_ARCHIVED',\r\n      },\r\n      onPinTask: actionsData.onPinTask,\r\n      onArchiveTask: actionsData.onArchiveTask,\r\n    },\r\n  }),\r\n}"
                },
                {
                    "name": "DefaultTask",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task-styles/task-styles.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n\r\n  args:{\r\n    task:{\r\n      id: '1',\r\n      title: 'Test Task',\r\n      state: 'TASK_INBOX', \r\n    }\r\n  }\r\n  // render: () => ({\r\n  //   props: {\r\n  //     task: {\r\n  //       id: '1',\r\n  //       title: 'Test Task',\r\n  //       state: 'TASK_INBOX',\r\n  //     },\r\n  //     onPinTask: actionsData.onPinTask,\r\n  //     onArchiveTask: actionsData.onArchiveTask,\r\n  //   },\r\n  // }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task-styles/task-styles.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TaskStylesComponent>",
                    "defaultValue": "{\r\n  /* 👇 The title prop is optional.\r\n   * See https://storybook.js.org/docs/angular/configure/overview#configure-story-loading\r\n   * to learn how to generate automatic titles\r\n   */\r\n  title: 'TaskBox/TaskStylesComponent',\r\n  component: TaskStylesComponent,\r\n\r\n}"
                },
                {
                    "name": "Pinned",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task-styles/task-styles.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: () => ({\r\n    props: {\r\n      task: {\r\n        id: '1',\r\n        title: 'Test Task',\r\n        state: 'TASK_PINNED',\r\n      },\r\n      onPinTask: actionsData.onPinTask,\r\n      onArchiveTask: actionsData.onArchiveTask,\r\n    },\r\n  }),\r\n}"
                }
            ],
            "src/app/components/task-list/pure-task-list.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task-list/pure-task-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  \r\n  args:{\r\n  tasks: [\r\n    { ...TaskStylesStories.DefaultTask.args?.['task'], id: '1', title: 'Task 1' },\r\n    { ...TaskStylesStories.DefaultTask.args?.['task'], id: '2', title: 'Task 2' },\r\n    { ...TaskStylesStories.DefaultTask.args?.['task'], id: '3', title: 'Task 3' },\r\n    { ...TaskStylesStories.DefaultTask.args?.['task'], id: '4', title: 'Task 4' },\r\n    { ...TaskStylesStories.DefaultTask.args?.['task'], id: '5', title: 'Task 5' },\r\n    { ...TaskStylesStories.DefaultTask.args?.['task'], id: '6', title: 'Task 6' },\r\n  ],\r\n}\r\n}"
                },
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task-list/pure-task-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args : {\r\n     // Shaping the stories through args composition.\r\n     // Inherited data coming from the Loading story.\r\n     // ...Loading.args,\r\n    ...Loading.args,\r\n     loading: false,\r\n  }\r\n}"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task-list/pure-task-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args : {\r\n      tasks: [],\r\n      loading: true,\r\n  }\r\n\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task-list/pure-task-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PureTaskListComponent>",
                    "defaultValue": "{\r\n\r\n  title: 'TaskBox/PureTaskList',\r\n  component: PureTaskListComponent,\r\n\r\n  decorators: [\r\n    moduleMetadata({\r\n      //👇 Imports both components to allow component composition with storybook\r\n      declarations: [PureTaskListComponent, TaskStylesComponent],\r\n      imports: [CommonModule],\r\n    }),\r\n    //👇 Wraps our stories with a decorator\r\n    componentWrapperDecorator(story => `<div style=\"margin: 3em\">${story}</div>`),\r\n  ],\r\n\r\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task-list/pure-task-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n      onPinTask: TaskStylesStories.DefaultTask.args?.onPinTask,\r\n      onArchiveTask: TaskStylesStories.DefaultTask.args?.onArchiveTask,\r\n    }\r\n}"
                },
                {
                    "name": "WithPinnedTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task-list/pure-task-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n\r\n  args:{\r\n      tasks: [\r\n          ...(Default.args?.['tasks'] as Task[] ).slice(0, 5),\r\n          { id: '6', title: 'Task 6 (pinned)', state: 'TASK_PINNED' },\r\n      ],\r\n  \r\n  }\r\n  }"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    production: true\r\n  }"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    production: false\r\n  }"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\r\n  parameters: {\r\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\r\n    controls: {\r\n      matchers: {\r\n        color: /(background|color)$/i,\r\n        date: /Date$/,\r\n      },\r\n    },\r\n  },\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/components/task-list/pure-task-list.stories.ts": [
                {
                    "name": "action",
                    "file": "src/app/components/task-list/pure-task-list.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "arg0",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "arg0",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/components/task-list/pure-task-list.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PureTaskListComponent>",
                    "file": "src/app/components/task-list/pure-task-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/components/task-styles/task-styles.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TaskStylesComponent>",
                    "file": "src/app/components/task-styles/task-styles.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/markdown/markdown.stories.ts": [
                {
                    "name": "StoryDetail",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<MarkdownComponent>",
                    "file": "src/app/markdown/markdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/markdown/TaskListmarkdown.stories.ts": [
                {
                    "name": "StoryDetail",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<MarkdownTaskListComponent>",
                    "file": "src/app/markdown/TaskListmarkdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/mermaid/mermaid.stories.ts": [
                {
                    "name": "StoryDetail",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<MermaidComponent>",
                    "file": "src/app/mermaid/mermaid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-list/pure-task-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PureTaskListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-list/pure-task-list.stories.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "action",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-list/pure-task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-list/pure-task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-list/pure-task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-list/pure-task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-list/pure-task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-list/pure-task-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithPinnedTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-list/task-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskListComponent",
                "coveragePercent": 40,
                "coverageCount": "2/5",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/task-styles/task-styles.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskStylesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-styles/task-styles.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-styles/task-styles.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Archived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-styles/task-styles.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultTask",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-styles/task-styles.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-styles/task-styles.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Pinned",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/markdown/TaskListmarkdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MarkdownTaskListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/markdown/TaskListmarkdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/markdown/TaskListmarkdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaDetail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/markdown/TaskListmarkdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrivateMarkdownTlist",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/markdown/markdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MarkdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/markdown/markdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/markdown/markdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaDetail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/markdown/markdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrivateMarkdown",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mermaid/mermaid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MermaidComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mermaid/mermaid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mermaid/mermaid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaDetail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mermaid/mermaid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrivateMermaid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/task.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ArchiveTask",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PinTask",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TasksState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskStateModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}